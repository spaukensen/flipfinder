{
  "name": "Scanner Interencheres - Outillage Pro",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 30
            }
          ]
        }
      },
      "id": "schedule-trigger",
      "name": "Toutes les 30min",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=http://playwright-stealth:3001/scrape",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"url\": \"https://www.interencheres.com/recherche/?keyword=\" + encodeURIComponent($json.keyword) + \"&cat=14\",\n  \"waitFor\": 8000\n} }}",
        "options": {
          "timeout": 90000
        }
      },
      "id": "http-request-interencheres",
      "name": "Scan Interencheres (Stealth)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [670, 300]
    },
    {
      "parameters": {
        "jsCode": "const keywords = [\n  'hilti',\n  'festool',\n  'milwaukee',\n  'makita',\n  'dewalt',\n  'bosch pro',\n  'metabo',\n  'liquidation judiciaire',\n  'cessation activite',\n  'fermeture entreprise'\n];\n\nreturn keywords.map(keyword => ({ json: { keyword } }));"
      },
      "id": "code-keywords",
      "name": "Mots-cl√©s Premium",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "jsCode": "// N≈ìud de synth√®se et validation des donn√©es\nconst items = $input.all();\nconst keywords = $('Mots-cl√©s Premium').all();\nconst synthese = [];\n\nfor (let i = 0; i < items.length; i++) {\n  const data = items[i].json;\n  \n  // R√©cup√©rer le keyword correspondant depuis le n≈ìud \"Mots-cl√©s Premium\"\n  const keyword = keywords[i] ? keywords[i].json.keyword : 'unknown';\n  \n  const html = data.html || data.body || '';\n  const success = data.success !== undefined ? data.success : false;\n  const cloudflareDetected = data.cloudflareDetected || false;\n  \n  // Statistiques HTML\n  const htmlLength = html.length;\n  const hasContent = htmlLength > 10000;\n  \n  // D√©tection de contenu r√©el\n  const hasLots = html.includes('class=\"lot') || html.includes('result') || html.includes('<article');\n  const hasKeyword = keyword ? html.toLowerCase().includes(keyword.toLowerCase()) : false;\n  \n  synthese.push({\n    json: {\n      keyword: keyword,\n      success,\n      cloudflareDetected,\n      htmlLength,\n      hasContent,\n      hasLots,\n      hasKeyword,\n      status: success && !cloudflareDetected && hasContent ? '‚úÖ OK' : '‚ö†Ô∏è Issue',\n      html: html,  // Conserver le HTML pour le n≈ìud suivant\n      timestamp: new Date().toISOString()\n    }\n  });\n}\n\nreturn synthese;"
      },
      "id": "code-synthese",
      "name": "üìä Synth√®se & Validation",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [775, 300]
    },
    {
      "parameters": {
        "jsCode": "// Extraction et scoring des r√©sultats - TOUS LES ITEMS\nconst items = $input.all();\nconst allResults = [];\n\n// Patterns de d√©tection\nconst MARQUES_PREMIUM = {\n  'hilti': 2.5,\n  'festool': 2.3,\n  'milwaukee': 2.1,\n  'makita': 2.0,\n  'dewalt': 1.9,\n  'bosch': 1.7,\n  'metabo': 1.8\n};\n\nconst SIGNAUX_LIQUIDATION = [\n  { pattern: /liquidation\\s+judiciaire/i, score: 0.3 },\n  { pattern: /cessation\\s+activit[√©e]/i, score: 0.3 },\n  { pattern: /fermeture\\s+entreprise/i, score: 0.25 },\n  { pattern: /d[√©e]part\\s+retraite/i, score: 0.2 },\n  { pattern: /urgent/i, score: 0.15 }\n];\n\n// Patterns Interencheres (√† adapter selon structure r√©elle)\nconst htmlPatterns = [\n  /<article[^>]*class=\"[^\"]*lot[^\"]*\"[^>]*>([\\s\\S]*?)<\\/article>/gi,\n  /<div[^>]*class=\"[^\"]*result[^\"]*\"[^>]*>([\\s\\S]*?)<\\/div>/gi\n];\n\n// Traiter chaque item (chaque keyword)\nfor (let i = 0; i < items.length; i++) {\n  const data = items[i].json;\n  const html = data.html || '';\n  const keyword = data.keyword || 'unknown';\n  \n  // V√©rifier si Cloudflare CHALLENGE est pr√©sent (d√©tection plus stricte)\n  const isCloudflareChallenge = (\n    (html.includes('cf-browser-verification') && html.includes('Checking your browser')) ||\n    (html.includes('challenge-platform') && html.includes('Just a moment')) ||\n    (html.includes('Cloudflare') && html.length < 5000)\n  );\n  \n  if (isCloudflareChallenge) {\n    allResults.push({ \n      json: { \n        error: 'Cloudflare d√©tect√©', \n        keyword, \n        html_preview: html.substring(0, 500) \n      } \n    });\n    continue;\n  }\n  \n  // Parse HTML pour ce keyword\n  let foundResults = false;\n  \n  for (const regex of htmlPatterns) {\n    let match;\n    while ((match = regex.exec(html)) !== null) {\n      const itemHtml = match[1];\n      \n      // Extraction titre\n      let titre = '';\n      const titlePatterns = [\n        /<h[2-4][^>]*>([^<]+)<\\/h[2-4]>/i,\n        /<[^>]*class=\"[^\"]*title[^\"]*\"[^>]*>([^<]+)</i,\n        /<a[^>]*title=\"([^\"]+)\"/i\n      ];\n      \n      for (const tp of titlePatterns) {\n        const tm = tp.exec(itemHtml);\n        if (tm) {\n          titre = tm[1].trim();\n          break;\n        }\n      }\n      \n      if (!titre) continue;\n      \n      // Extraction prix\n      const priceMatch = /(\\d+(?:[\\s,]\\d{3})*)\\s*‚Ç¨/i.exec(itemHtml);\n      const prix = priceMatch ? parseInt(priceMatch[1].replace(/[\\s,]/g, '')) : 0;\n      \n      // Extraction lien\n      const linkMatch = /href=\"([^\"]+)\"/i.exec(itemHtml);\n      let url = linkMatch ? linkMatch[1] : '';\n      if (url && !url.startsWith('http')) {\n        url = 'https://www.interencheres.com' + url;\n      }\n      \n      // Calcul du score\n      let score = 0;\n      let marque_detectee = null;\n      let multiplicateur = 1;\n      \n      // D√©tection marque\n      for (const [marque, mult] of Object.entries(MARQUES_PREMIUM)) {\n        if (titre.toLowerCase().includes(marque)) {\n          marque_detectee = marque;\n          multiplicateur = mult;\n          score += 0.4;\n          break;\n        }\n      }\n      \n      // D√©tection signaux liquidation\n      for (const signal of SIGNAUX_LIQUIDATION) {\n        if (signal.pattern.test(titre)) {\n          score += signal.score;\n        }\n      }\n      \n      // Score prix (plus c'est bas, mieux c'est)\n      if (prix > 0 && prix < 100) score += 0.3;\n      else if (prix < 200) score += 0.2;\n      else if (prix < 500) score += 0.1;\n      \n      // Estimation ROI\n      const valeur_estimee = prix * multiplicateur;\n      const roi_estime = multiplicateur - 1;\n      \n      if (score > 0.5) {\n        allResults.push({\n          json: {\n            titre,\n            prix,\n            url,\n            keyword,\n            score: Math.min(score, 1),\n            marque_detectee,\n            multiplicateur,\n            valeur_estimee,\n            roi_estime,\n            statut: 'DETECTE',\n            date_detection: new Date().toISOString()\n          }\n        });\n        foundResults = true;\n      }\n    }\n    \n    if (foundResults) break;\n  }\n  \n  // Si aucun r√©sultat trouv√© pour ce keyword\n  if (!foundResults) {\n    allResults.push({ \n      json: { \n        message: 'Aucun r√©sultat pertinent', \n        keyword, \n        html_length: html.length \n      } \n    });\n  }\n}\n\nreturn allResults.length > 0 ? allResults : [{ json: { message: 'Aucun item trait√©' } }];"
      },
      "id": "code-scoring",
      "name": "Extraction + Scoring",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [985, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-score",
              "leftValue": "={{ $json.score }}",
              "rightValue": 0.7,
              "operator": {
                "type": "number",
                "operation": "gte"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "filter-score",
      "name": "Score > 0.7",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2,
      "position": [1195, 300]
    },
    {
      "parameters": {
        "operation": "insert",
        "schema": {
          "schema": "public"
        },
        "table": {
          "table": "opportunites"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "titre": "={{ $json.titre }}",
            "prix_achat": "={{ $json.prix }}",
            "url_source": "={{ $json.url }}",
            "score": "={{ $json.score }}",
            "marques_detectees": "={{ { marque: $json.marque_detectee } }}",
            "facteurs": "={{ { roi_estime: $json.roi_estime, multiplicateur: $json.multiplicateur, valeur_estimee: $json.valeur_estimee } }}",
            "statut": "DETECTE"
          }
        },
        "options": {}
      },
      "id": "postgres-insert",
      "name": "Sauvegarder en DB",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1405, 300],
      "credentials": {
        "postgres": {
          "id": "postgres-credentials",
          "name": "PostgreSQL Outillage"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $env.DISCORD_WEBHOOK_URL }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"embeds\": [{\n    \"title\": \"üî• Opportunit√© d√©tect√©e !\",\n    \"description\": $json.titre,\n    \"color\": 16737792,\n    \"fields\": [\n      { \"name\": \"üí∞ Prix\", \"value\": $json.prix + \"‚Ç¨\", \"inline\": true },\n      { \"name\": \"üìä Score\", \"value\": Math.round($json.score * 100) + \"%\", \"inline\": true },\n      { \"name\": \"üè∑Ô∏è Marque\", \"value\": $json.marque_detectee || \"Non d√©tect√©e\", \"inline\": true },\n      { \"name\": \"üìà ROI estim√©\", \"value\": Math.round($json.roi_estime * 100) + \"%\", \"inline\": true },\n      { \"name\": \"üíµ Valeur estim√©e\", \"value\": $json.valeur_estimee + \"‚Ç¨\", \"inline\": true }\n    ],\n    \"url\": $json.url,\n    \"timestamp\": new Date().toISOString()\n  }]\n} }}",
        "options": {}
      },
      "id": "discord-alert",
      "name": "Alerte Discord",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1405, 480]
    }
  ],
  "connections": {
    "Toutes les 30min": {
      "main": [
        [
          {
            "node": "Mots-cl√©s Premium",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mots-cl√©s Premium": {
      "main": [
        [
          {
            "node": "Scan Interencheres (Stealth)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Scan Interencheres (Stealth)": {
      "main": [
        [
          {
            "node": "üìä Synth√®se & Validation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìä Synth√®se & Validation": {
      "main": [
        [
          {
            "node": "Extraction + Scoring",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extraction + Scoring": {
      "main": [
        [
          {
            "node": "Score > 0.7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Score > 0.7": {
      "main": [
        [
          {
            "node": "Sauvegarder en DB",
            "type": "main",
            "index": 0
          },
          {
            "node": "Alerte Discord",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2024-10-31T00:00:00.000Z",
  "versionId": "1"
}
