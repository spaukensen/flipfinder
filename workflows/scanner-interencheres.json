{
  "name": "Scanner Interencheres - Outillage Pro",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 30
            }
          ]
        }
      },
      "id": "schedule-trigger",
      "name": "Toutes les 30min",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=http://playwright-stealth:3001/scrape",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"url\": \"https://www.interencheres.com/recherche/lots?location=\" + encodeURIComponent('{\"lat\":44.840116,\"lon\":-0.570681,\"city\":\" Bordeaux, Gironde, France\"}') + \"&radius=50&search=\" + encodeURIComponent($json.keyword),\n  \"waitFor\": 8000\n} }}",
        "options": {
          "timeout": 90000
        }
      },
      "id": "http-request-interencheres",
      "name": "Scan Interencheres (Stealth)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [670, 300]
    },
    {
      "parameters": {
        "jsCode": "const keywords = [\n  'hilti',\n  'festool',\n  'milwaukee',\n  'makita',\n  'dewalt',\n  'bosch pro',\n  'metabo',\n  'liquidation judiciaire',\n  'cessation activite',\n  'fermeture entreprise'\n];\n\nreturn keywords.map(keyword => ({ json: { keyword } }));"
      },
      "id": "code-keywords",
      "name": "Mots-cl√©s Premium",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "jsCode": "// N≈ìud de synth√®se et validation des donn√©es\nconst items = $input.all();\nconst keywords = $('Mots-cl√©s Premium').all();\nconst synthese = [];\n\nfor (let i = 0; i < items.length; i++) {\n  const data = items[i].json;\n  \n  // R√©cup√©rer le keyword correspondant depuis le n≈ìud \"Mots-cl√©s Premium\"\n  const keyword = keywords[i] ? keywords[i].json.keyword : 'unknown';\n  \n  const html = data.html || data.body || '';\n  const success = data.success !== undefined ? data.success : false;\n  const cloudflareDetected = data.cloudflareDetected || false;\n  \n  // Statistiques HTML\n  const htmlLength = html.length;\n  const hasContent = htmlLength > 10000;\n  \n  // D√©tection de contenu r√©el\n  const hasLots = html.includes('class=\"lot') || html.includes('result') || html.includes('<article');\n  const hasKeyword = keyword ? html.toLowerCase().includes(keyword.toLowerCase()) : false;\n  \n  synthese.push({\n    json: {\n      keyword: keyword,\n      success,\n      cloudflareDetected,\n      htmlLength,\n      hasContent,\n      hasLots,\n      hasKeyword,\n      status: success && !cloudflareDetected && hasContent ? '‚úÖ OK' : '‚ö†Ô∏è Issue',\n      html: html,  // Conserver le HTML pour le n≈ìud suivant\n      timestamp: new Date().toISOString()\n    }\n  });\n}\n\nreturn synthese;"
      },
      "id": "code-synthese",
      "name": "üìä Synth√®se & Validation",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [775, 300]
    },
    {
      "parameters": {
        "jsCode": "// Extraction et scoring bas√© sur la vraie structure HTML Interencheres\nconst items = $input.all();\nconst allResults = [];\n\n// Patterns de d√©tection\nconst MARQUES_PREMIUM = {\n  'hilti': 2.5,\n  'festool': 2.3,\n  'milwaukee': 2.1,\n  'makita': 2.0,\n  'dewalt': 1.9,\n  'bosch': 1.7,\n  'metabo': 1.8\n};\n\nconst SIGNAUX_LIQUIDATION = [\n  { pattern: /liquidation\\s+judiciaire/i, score: 0.3 },\n  { pattern: /cessation\\s+activit[√©e]/i, score: 0.3 },\n  { pattern: /fermeture\\s+entreprise/i, score: 0.25 },\n  { pattern: /d[√©e]part\\s+retraite/i, score: 0.2 },\n  { pattern: /urgent/i, score: 0.15 }\n];\n\n// Traiter chaque item (chaque keyword)\nfor (let i = 0; i < items.length; i++) {\n  const data = items[i].json;\n  const html = data.html || '';\n  const keyword = data.keyword || 'unknown';\n  \n  // V√©rifier Cloudflare CHALLENGE\n  const isCloudflareChallenge = (\n    (html.includes('cf-browser-verification') && html.includes('Checking your browser')) ||\n    (html.includes('challenge-platform') && html.includes('Just a moment')) ||\n    (html.includes('Cloudflare') && html.length < 5000)\n  );\n  \n  if (isCloudflareChallenge) {\n    allResults.push({ \n      json: { \n        error: 'Cloudflare d√©tect√©', \n        keyword, \n        html_preview: html.substring(0, 500) \n      } \n    });\n    continue;\n  }\n  \n  // EXTRACTION DES LOTS - Structure Interencheres r√©elle\n  // Pattern: <a href=\"/biens-equipement/.../lot-XXXXX.html\" ... id=\"XXXXX\">\n  const lotPattern = /<a[^>]*href=\"([^\"]*\\/lot-\\d+\\.html)\"[^>]*id=\"(\\d+)\"[^>]*>([\\s\\S]*?)<\\/a>/gi;\n  \n  let match;\n  let lotsFound = 0;\n  \n  while ((match = lotPattern.exec(html)) !== null) {\n    const url = 'https://www.interencheres.com' + match[1];\n    const lotId = match[2];\n    const lotContent = match[3];\n    \n    // Extraction titre - <div class=\"title text-subtitle-2 font-weight-bold white--text\">\n    const titreMatch = /<div[^>]*class=\"[^\"]*title[^\"]*text-subtitle-2[^\"]*\"[^>]*>\\s*<div[^>]*>([^<]+)<\\/div>/i.exec(lotContent);\n    if (!titreMatch) continue;\n    \n    const titre = titreMatch[1].trim();\n    \n    // Extraction estimation du vendeur (optionnelle)\n    let estimation_vendeur_min = null;\n    let estimation_vendeur_max = null;\n    const estimationVendeurMatch = /Estimation\\s*:\\s*<\\/span>\\s*<span[^>]*>(\\d+)(?:&nbsp;)?\\s*‚Ç¨\\s*-\\s*(\\d+)(?:&nbsp;)?\\s*‚Ç¨/i.exec(lotContent);\n    if (estimationVendeurMatch) {\n      estimation_vendeur_min = parseInt(estimationVendeurMatch[1]);\n      estimation_vendeur_max = parseInt(estimationVendeurMatch[2]);\n    }\n\n    // Extraction prix - Mise √† prix\n    let prix = 0;\n    const miseAPrixMatch = /Mise\\s+√†\\s+prix\\s*:\\s*<\\/span>\\s*<span[^>]*>(\\d+)(?:&nbsp;)?\\s*‚Ç¨/i.exec(lotContent);\n    if (miseAPrixMatch) {\n      prix = parseInt(miseAPrixMatch[1]);\n    } else if (estimation_vendeur_min) {\n      // Si pas de mise √† prix, utiliser l'estimation min comme r√©f√©rence\n      prix = estimation_vendeur_min;\n    }\n    \n    // Calcul du score\n    let score = 0;\n    let marque_detectee = null;\n    let multiplicateur = 1;\n    \n    // D√©tection marque\n    for (const [marque, mult] of Object.entries(MARQUES_PREMIUM)) {\n      if (titre.toLowerCase().includes(marque)) {\n        marque_detectee = marque;\n        multiplicateur = mult;\n        score += 0.4;\n        break;\n      }\n    }\n    \n    // D√©tection signaux liquidation\n    for (const signal of SIGNAUX_LIQUIDATION) {\n      if (signal.pattern.test(titre)) {\n        score += signal.score;\n      }\n    }\n    \n    // Score prix (plus c'est bas, mieux c'est)\n    if (prix > 0 && prix < 100) score += 0.3;\n    else if (prix < 200) score += 0.2;\n    else if (prix < 500) score += 0.1;\n    \n    // Estimation ROI\n    const valeur_estimee = Math.round(prix * multiplicateur);\n    const roi_estime = Math.round((multiplicateur - 1) * 100) / 100;\n    \n    // Conserver tous les lots avec score > 0.3 (pas juste 0.5)\n    if (score > 0.3) {\n      allResults.push({\n        json: {\n          titre,\n          prix,\n          estimation_vendeur_min,\n          estimation_vendeur_max,\n          url,\n          lot_id: lotId,\n          keyword,\n          score: Math.round(score * 100) / 100,\n          marque_detectee,\n          multiplicateur,\n          valeur_estimee,\n          roi_estime,\n          statut: 'DETECTE',\n          date_detection: new Date().toISOString()\n        }\n      });\n      lotsFound++;\n    }\n  }\n  \n  // Si aucun r√©sultat trouv√© pour ce keyword\n  if (lotsFound === 0) {\n    allResults.push({ \n      json: { \n        message: 'Aucun lot trouv√©', \n        keyword, \n        html_length: html.length,\n        has_autoqa_class: html.includes('autoqa-sale-details-item'),\n        has_lot_links: html.includes('/lot-')\n      } \n    });\n  }\n}\n\nreturn allResults.length > 0 ? allResults : [{ json: { message: 'Aucun item trait√©' } }];"
      },
      "id": "code-scoring",
      "name": "Extraction + Scoring",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [985, 300]
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "={{ $env.GOOGLE_SHEET_ID }}",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "Scanner Interencheres",
          "mode": "name"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "matchingColumns": ["lot_id"],
          "schema": [
            { "id": "titre", "displayName": "Titre", "required": false, "defaultMatch": false, "canBeUsedToMatch": false, "type": "string" },
            { "id": "prix", "displayName": "Prix", "required": false, "defaultMatch": false, "canBeUsedToMatch": false, "type": "number" },
            { "id": "estimation_vendeur_min", "displayName": "Estimation Min", "required": false, "defaultMatch": false, "canBeUsedToMatch": false, "type": "number" },
            { "id": "estimation_vendeur_max", "displayName": "Estimation Max", "required": false, "defaultMatch": false, "canBeUsedToMatch": false, "type": "number" },
            { "id": "url", "displayName": "URL", "required": false, "defaultMatch": false, "canBeUsedToMatch": false, "type": "string" },
            { "id": "lot_id", "displayName": "Lot ID", "required": false, "defaultMatch": true, "canBeUsedToMatch": true, "type": "string" },
            { "id": "keyword", "displayName": "Keyword", "required": false, "defaultMatch": false, "canBeUsedToMatch": false, "type": "string" },
            { "id": "score", "displayName": "Score", "required": false, "defaultMatch": false, "canBeUsedToMatch": false, "type": "number" },
            { "id": "marque_detectee", "displayName": "Marque", "required": false, "defaultMatch": false, "canBeUsedToMatch": false, "type": "string" },
            { "id": "multiplicateur", "displayName": "Multiplicateur", "required": false, "defaultMatch": false, "canBeUsedToMatch": false, "type": "number" },
            { "id": "valeur_estimee", "displayName": "Valeur Estim√©e", "required": false, "defaultMatch": false, "canBeUsedToMatch": false, "type": "number" },
            { "id": "roi_estime", "displayName": "ROI Estim√©", "required": false, "defaultMatch": false, "canBeUsedToMatch": false, "type": "number" },
            { "id": "statut", "displayName": "Statut", "required": false, "defaultMatch": false, "canBeUsedToMatch": false, "type": "string" },
            { "id": "date_detection", "displayName": "Date D√©tection", "required": false, "defaultMatch": false, "canBeUsedToMatch": false, "type": "string" }
          ]
        },
        "options": {}
      },
      "id": "google-sheets-append",
      "name": "Sauvegarder dans Google Sheets",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.4,
      "position": [1195, 300],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "google-sheets-credentials",
          "name": "Google Sheets FlipFinder"
        }
      }
    }
  ],
  "connections": {
    "Toutes les 30min": {
      "main": [
        [
          {
            "node": "Mots-cl√©s Premium",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mots-cl√©s Premium": {
      "main": [
        [
          {
            "node": "Scan Interencheres (Stealth)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Scan Interencheres (Stealth)": {
      "main": [
        [
          {
            "node": "üìä Synth√®se & Validation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìä Synth√®se & Validation": {
      "main": [
        [
          {
            "node": "Extraction + Scoring",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extraction + Scoring": {
      "main": [
        [
          {
            "node": "Sauvegarder dans Google Sheets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2024-10-31T00:00:00.000Z",
  "versionId": "1"
}
