{
  "name": "Analyse D√©taill√©e - Opportunit√©",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "analyse-opportunite",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Webhook Analyse",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [250, 300],
      "webhookId": "analyse-opportunite"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM opportunites WHERE id = {{ $json.body.opportunite_id }}",
        "options": {}
      },
      "id": "postgres-get-opportunite",
      "name": "R√©cup√©rer Opportunit√©",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [460, 300],
      "credentials": {
        "postgres": {
          "id": "postgres-credentials",
          "name": "PostgreSQL Outillage"
        }
      }
    },
    {
      "parameters": {
        "method": "GET",
        "url": "={{ $json.url_source }}",
        "options": {
          "redirect": {
            "redirect": {
              "followRedirects": true
            }
          }
        }
      },
      "id": "http-detail-page",
      "name": "Fetch Page D√©tail",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [670, 300]
    },
    {
      "parameters": {
        "jsCode": "// Analyse d√©taill√©e avec extraction d'informations suppl√©mentaires\nconst html = $input.first().json.body;\nconst opportunite = $input.all()[0].json;\n\n// Extraction des images\nconst imageRegex = /<img[^>]+src=\"([^\"]+)\"/gi;\nconst images = [];\nlet imgMatch;\n\nwhile ((imgMatch = imageRegex.exec(html)) !== null) {\n  if (imgMatch[1].includes('photo') || imgMatch[1].includes('image')) {\n    images.push(imgMatch[1]);\n  }\n}\n\n// Extraction description\nconst descRegex = /<div class=\"description\"[^>]*>([\\s\\S]*?)<\\/div>/i;\nconst descMatch = descRegex.exec(html);\nconst description = descMatch ? descMatch[1].replace(/<[^>]+>/g, '').trim() : '';\n\n// Extraction date fin ench√®re\nconst dateRegex = /(\\d{2})\\/(\\d{2})\\/(\\d{4})[^\\d]*(\\d{2}):(\\d{2})/;\nconst dateMatch = dateRegex.exec(html);\nconst date_fin_enchere = dateMatch \n  ? new Date(`${dateMatch[3]}-${dateMatch[2]}-${dateMatch[1]}T${dateMatch[4]}:${dateMatch[5]}:00`).toISOString()\n  : null;\n\n// D√©tection mod√®le sp√©cifique\nconst modeles = {\n  hilti: /TE\\s*(\\d+)|DD\\s*(\\d+)|SF\\s*(\\d+)/i,\n  festool: /TS\\s*(\\d+)|OF\\s*(\\d+)|CTL\\s*(\\d+)/i,\n  milwaukee: /M(\\d{2})[A-Z]*/i,\n  makita: /D[A-Z]{2}\\s*(\\d{3})/i,\n  dewalt: /DC[A-Z]\\s*(\\d{3})/i\n};\n\nlet modele_detecte = null;\nconst marque = opportunite.marques_detectees?.marque;\n\nif (marque && modeles[marque.toLowerCase()]) {\n  const modeleMatch = modeles[marque.toLowerCase()].exec(description + ' ' + opportunite.titre);\n  if (modeleMatch) {\n    modele_detecte = modeleMatch[0];\n  }\n}\n\n// Estimation prix march√© (√† am√©liorer avec API externe)\nconst prix_marche_estime = opportunite.prix * (opportunite.facteurs?.multiplicateur || 2);\n\n// Scoring d√©taill√©\nlet score_final = opportunite.score || 0;\n\n// Bonus si images pr√©sentes\nif (images.length > 3) score_final += 0.05;\nif (images.length > 5) score_final += 0.05;\n\n// Bonus si description d√©taill√©e\nif (description.length > 200) score_final += 0.05;\n\n// Bonus si mod√®le d√©tect√©\nif (modele_detecte) score_final += 0.1;\n\n// Malus si peu d'infos\nif (description.length < 50) score_final -= 0.1;\nif (images.length < 2) score_final -= 0.1;\n\nreturn [{\n  json: {\n    opportunite_id: opportunite.id,\n    images: images.slice(0, 10),\n    description,\n    date_fin_enchere,\n    modele_detecte,\n    prix_marche_estime,\n    score_final: Math.max(0, Math.min(1, score_final)),\n    analyse_complete: true,\n    recommandation: score_final > 0.75 ? 'ACHAT_PRIORITAIRE' : score_final > 0.6 ? 'ACHAT_SURVEILLER' : 'PASSER'\n  }\n}];"
      },
      "id": "code-analyse",
      "name": "Analyse IA",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [880, 300]
    },
    {
      "parameters": {
        "model": "mistral:latest",
        "prompt": "=Analyse cette opportunit√© d'arbitrage d'outillage professionnel et donne ton avis :\n\nTitre : {{ $json.titre }}\nPrix : {{ $json.prix }}‚Ç¨\nMarque : {{ $json.marque_detectee }}\nMod√®le : {{ $json.modele_detecte || 'Non d√©tect√©' }}\nDescription : {{ $json.description }}\n\n√âvalue :\n1. Authenticit√© (vraie marque pro ou contrefa√ßon ?)\n2. √âtat probable (neuf, occasion, d√©fectueux)\n3. Valeur march√© r√©elle\n4. Risques potentiels\n5. Recommandation achat (OUI/NON/SURVEILLER)\n\nR√©ponds en JSON format :\n{\n  \"authenticite_score\": 0-100,\n  \"etat_probable\": \"neuf|occasion|defectueux\",\n  \"valeur_marche\": prix_en_euros,\n  \"risques\": [\"risque1\", \"risque2\"],\n  \"recommandation\": \"OUI|NON|SURVEILLER\",\n  \"justification\": \"explication courte\"\n}",
        "options": {}
      },
      "id": "ollama-ai",
      "name": "Ollama IA Analysis",
      "type": "n8n-nodes-base.ollama",
      "typeVersion": 1,
      "position": [1090, 300],
      "credentials": {
        "ollamaApi": {
          "id": "ollama-credentials",
          "name": "Ollama Local"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Fusion des donn√©es analyse + IA\nconst analyse = $input.all()[0].json;\nconst ia_result = $input.first().json.response;\n\nlet ia_data = {};\ntry {\n  ia_data = JSON.parse(ia_result);\n} catch (e) {\n  ia_data = { error: 'Parse failed' };\n}\n\nreturn [{\n  json: {\n    ...analyse,\n    ia_authenticite: ia_data.authenticite_score,\n    ia_etat: ia_data.etat_probable,\n    ia_valeur_marche: ia_data.valeur_marche,\n    ia_risques: ia_data.risques,\n    ia_recommandation: ia_data.recommandation,\n    ia_justification: ia_data.justification\n  }\n}];"
      },
      "id": "code-merge",
      "name": "Fusion Donn√©es",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1300, 300]
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "schema": "public"
        },
        "table": {
          "table": "opportunites"
        },
        "updateKey": {
          "updateKey": "id",
          "value": "={{ $json.opportunite_id }}"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "description": "={{ $json.description }}",
            "images_urls": "={{ $json.images }}",
            "date_fin_enchere": "={{ $json.date_fin_enchere }}",
            "score": "={{ $json.score_final }}",
            "marques_detectees": "={{ { marque: $json.marque_detectee, modele: $json.modele_detecte } }}",
            "facteurs": "={{ { \n              prix_marche_estime: $json.prix_marche_estime,\n              ia_authenticite: $json.ia_authenticite,\n              ia_valeur_marche: $json.ia_valeur_marche,\n              ia_risques: $json.ia_risques \n            } }}",
            "statut": "={{ $json.recommandation }}",
            "analyse_ia": "={{ $json.ia_justification }}"
          }
        },
        "options": {}
      },
      "id": "postgres-update",
      "name": "Update DB",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1510, 300],
      "credentials": {
        "postgres": {
          "id": "postgres-credentials",
          "name": "PostgreSQL Outillage"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $env.DISCORD_WEBHOOK_URL }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"embeds\": [{\n    \"title\": \"‚úÖ Analyse compl√®te termin√©e\",\n    \"description\": $json.titre,\n    \"color\": 5763719,\n    \"fields\": [\n      { \"name\": \"ü§ñ Recommandation IA\", \"value\": $json.ia_recommandation, \"inline\": false },\n      { \"name\": \"üìä Authenticit√©\", \"value\": $json.ia_authenticite + \"%\", \"inline\": true },\n      { \"name\": \"üì¶ √âtat\", \"value\": $json.ia_etat, \"inline\": true },\n      { \"name\": \"üíµ Valeur march√©\", \"value\": $json.ia_valeur_marche + \"‚Ç¨\", \"inline\": true },\n      { \"name\": \"‚ö†Ô∏è Risques\", \"value\": ($json.ia_risques?.join('\\n‚Ä¢ ') || 'Aucun'), \"inline\": false },\n      { \"name\": \"üí° Justification\", \"value\": $json.ia_justification, \"inline\": false }\n    ],\n    \"timestamp\": new Date().toISOString()\n  }]\n} }}",
        "options": {}
      },
      "id": "discord-result",
      "name": "R√©sultat Discord",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1510, 480]
    }
  ],
  "connections": {
    "Webhook Analyse": {
      "main": [
        [
          {
            "node": "R√©cup√©rer Opportunit√©",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "R√©cup√©rer Opportunit√©": {
      "main": [
        [
          {
            "node": "Fetch Page D√©tail",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Page D√©tail": {
      "main": [
        [
          {
            "node": "Analyse IA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyse IA": {
      "main": [
        [
          {
            "node": "Ollama IA Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ollama IA Analysis": {
      "main": [
        [
          {
            "node": "Fusion Donn√©es",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fusion Donn√©es": {
      "main": [
        [
          {
            "node": "Update DB",
            "type": "main",
            "index": 0
          },
          {
            "node": "R√©sultat Discord",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2024-10-31T00:00:00.000Z",
  "versionId": "1"
}
